#!/bin/bash

declare -x SOLDER_APP_DEBUG
[[ -z "${SOLDER_APP_DEBUG}" ]] && SOLDER_APP_DEBUG="false"

declare -x SOLDER_APP_URL
[[ -z "${SOLDER_APP_URL}" ]] && SOLDER_APP_URL="http://localhost:8080"

declare -x SOLDER_APP_TIMEZONE
[[ -z "${SOLDER_APP_TIMEZONE}" ]] && SOLDER_APP_TIMEZONE="UTC"

declare -x SOLDER_APP_LOCALE
[[ -z "${SOLDER_APP_LOCALE}" ]] && SOLDER_APP_LOCALE="en"

declare -x SOLDER_APP_CIPHER
[[ -z "${SOLDER_APP_CIPHER}" ]] && SOLDER_APP_CIPHER="MCRYPT_RIJNDAEL_128"

declare -x SOLDER_APP_KEY
[[ -z "${SOLDER_APP_KEY}" ]] && SOLDER_APP_KEY=""

declare -x SOLDER_REDIS_HOST
[[ -z "${SOLDER_REDIS_HOST}" ]] && SOLDER_REDIS_HOST="redis"

declare -x SOLDER_REDIS_PORT
[[ -z "${SOLDER_REDIS_PORT}" ]] && SOLDER_REDIS_PORT="6379"

declare -x SOLDER_REDIS_DATABASE
[[ -z "${SOLDER_REDIS_DATABASE}" ]] && SOLDER_REDIS_DATABASE="0"

declare -x SOLDER_REDIS_CLUSTER
[[ -z "${SOLDER_REDIS_CLUSTER}" ]] && SOLDER_REDIS_CLUSTER="false"

declare -x SOLDER_MAIL_DRIVER
[[ -z "${SOLDER_MAIL_DRIVER}" ]] && SOLDER_MAIL_DRIVER="smtp"

declare -x SOLDER_MAIL_HOST
[[ -z "${SOLDER_MAIL_HOST}" ]] && SOLDER_MAIL_HOST="smtp.mailgun.org"

declare -x SOLDER_MAIL_PORT
[[ -z "${SOLDER_MAIL_PORT}" ]] && SOLDER_MAIL_PORT="587"

declare -x SOLDER_MAIL_ENCRYPTION
[[ -z "${SOLDER_MAIL_ENCRYPTION}" ]] && SOLDER_MAIL_ENCRYPTION="tls"

declare -x SOLDER_MAIL_USERNAME
[[ -z "${SOLDER_MAIL_USERNAME}" ]] && SOLDER_MAIL_USERNAME=""

declare -x SOLDER_MAIL_PASSWORD
[[ -z "${SOLDER_MAIL_PASSWORD}" ]] && SOLDER_MAIL_PASSWORD=""

declare -x SOLDER_MAIL_ADDRESS
[[ -z "${SOLDER_MAIL_ADDRESS}" ]] && SOLDER_MAIL_ADDRESS="solder@localhost"

declare -x SOLDER_MAIL_NAME
[[ -z "${SOLDER_MAIL_NAME}" ]] && SOLDER_MAIL_NAME="Solder"

declare -x SOLDER_MAIL_SENDMAIL
[[ -z "${SOLDER_MAIL_SENDMAIL}" ]] && SOLDER_MAIL_SENDMAIL="/usr/sbin/sendmail -bs"

declare -x SOLDER_REPO_LOCATION
[[ -z "${SOLDER_REPO_LOCATION}" ]] && SOLDER_REPO_LOCATION=""

declare -x SOLDER_MIRROR_URL
[[ -z "${SOLDER_MIRROR_URL}" ]] && SOLDER_MIRROR_URL=""

declare -x SOLDER_USE_S3
[[ -z "${SOLDER_USE_S3}" ]] && SOLDER_USE_S3="false"

declare -x SOLDER_S3_ACCESS_KEY
[[ -z "${SOLDER_S3_ACCESS_KEY}" ]] && SOLDER_S3_ACCESS_KEY=""

declare -x SOLDER_S3_SECRET_KEY
[[ -z "${SOLDER_S3_SECRET_KEY}" ]] && SOLDER_S3_SECRET_KEY=""

declare -x SOLDER_S3_BUCKET
[[ -z "${SOLDER_S3_BUCKET}" ]] && SOLDER_S3_BUCKET="solder"

declare -x SOLDER_DB_TYPE
[[ -z "${SOLDER_DB_TYPE}" ]] && SOLDER_DB_TYPE="mysql"

case "${SOLDER_DB_TYPE}" in
  "sqlite")
    declare -x SOLDER_DB_DATABASE
    declare -x SOLDER_DB_PREFIX

    [[ -z "${SOLDER_DB_DATABASE}" ]] && SOLDER_DB_DATABASE="/storage/database.sqlite3"

    if [ ! -f "${SOLDER_DB_DATABASE}" ]
    then
      /usr/bin/gosu \
        caddy \
        /usr/bin/sqlite3 \
        ${SOLDER_DB_DATABASE} \
        ""
    fi
    ;;

  "mysql")
    declare -x SOLDER_DB_HOST
    declare -x SOLDER_DB_DATABASE
    declare -x SOLDER_DB_USERNAME
    declare -x SOLDER_DB_PASSWORD
    declare -x SOLDER_DB_PREFIX
    declare -x SOLDER_DB_CHARSET
    declare -x SOLDER_DB_COLLATION

    [[ -z "${SOLDER_DB_HOST}" ]] && SOLDER_DB_HOST="mysql"
    [[ -z "${SOLDER_DB_DATABASE}" ]] && SOLDER_DB_DATABASE="solder"
    [[ -z "${SOLDER_DB_USERNAME}" ]] && SOLDER_DB_USERNAME="root"
    [[ -z "${SOLDER_DB_PASSWORD}" ]] && SOLDER_DB_PASSWORD="root"
    [[ -z "${SOLDER_DB_CHARSET}" ]] && SOLDER_DB_CHARSET="utf8"
    [[ -z "${SOLDER_DB_COLLATION}" ]] && SOLDER_DB_COLLATION="utf8_general_ci"

    if [ -z "${SOLDER_DB_USERNAME}" ]
    then
      echo >&2 "Error: You have to provide SOLDER_DB_USERNAME environment variable"
      s6-svc -t /etc/s6
      exit 1
    fi

    if [ -z "${SOLDER_DB_PASSWORD}" ]
    then
      echo >&2 "Error: You have to provide SOLDER_DB_PASSWORD environment variable"
      s6-svc -t /etc/s6
      exit 1
    fi
    ;;

  "pgsql")
    declare -x SOLDER_DB_HOST
    declare -x SOLDER_DB_DATABASE
    declare -x SOLDER_DB_USERNAME
    declare -x SOLDER_DB_PASSWORD
    declare -x SOLDER_DB_PREFIX
    declare -x SOLDER_DB_CHARSET
    declare -x SOLDER_DB_SCHEMA

    [[ -z "${SOLDER_DB_HOST}" ]] && SOLDER_DB_HOST="postgres"
    [[ -z "${SOLDER_DB_DATABASE}" ]] && SOLDER_DB_DATABASE="solder"
    [[ -z "${SOLDER_DB_USERNAME}" ]] && SOLDER_DB_USERNAME="root"
    [[ -z "${SOLDER_DB_PASSWORD}" ]] && SOLDER_DB_PASSWORD="root"
    [[ -z "${SOLDER_DB_CHARSET}" ]] && SOLDER_DB_CHARSET="utf8"
    [[ -z "${SOLDER_DB_SCHEMA}" ]] && SOLDER_DB_SCHEMA="public"

    if [ -z "${SOLDER_DB_USERNAME}" ]
    then
      echo >&2 "Error: You have to provide SOLDER_DB_USERNAME environment variable"
      s6-svc -t /etc/s6
      exit 1
    fi

    if [ -z "${SOLDER_DB_PASSWORD}" ]
    then
      echo >&2 "Error: You have to provide SOLDER_DB_PASSWORD environment variable"
      s6-svc -t /etc/s6
      exit 1
    fi
    ;;
esac

if [ -z "${SOLDER_APP_KEY}" ]
then
  if [ -f /storage/secret ]
  then
    SOLDER_APP_KEY=$(cat /storage/secret | head -n1)
  else
    SOLDER_APP_KEY=$(date +%s | sha256sum | base64 | head -c 32 ; echo)
    echo "${SOLDER_APP_KEY}" > /storage/secret
  fi
fi

if [ -z "${SOLDER_APP_URL}" ]
then
  echo >&2 "Error: You have to provide SOLDER_APP_URL environment variable"
  /bin/s6-svscanctl -t /etc/s6
  exit 1
fi

if [ -z "${SOLDER_REPO_LOCATION}" ]
then
  echo >&2 "Error: You have to provide SOLDER_REPO_LOCATION environment variable"
  /bin/s6-svscanctl -t /etc/s6
  exit 1
fi

if [ -z "${SOLDER_MIRROR_URL}" ]
then
  echo >&2 "Error: You have to provide SOLDER_MIRROR_URL environment variable"
  /bin/s6-svscanctl -t /etc/s6
  exit 1
fi

/usr/bin/templater -d -p solder \
  -o /srv/www/app/config/database.php \
  /etc/templates/database.php.tmpl

/usr/bin/templater -d -p solder \
  -o /srv/www/app/config/app.php \
  /etc/templates/app.php.tmpl

/usr/bin/templater -d -p solder \
  -o /srv/www/app/config/mail.php \
  /etc/templates/mail.php.tmpl

/usr/bin/templater -d -p solder \
  -o /srv/www/app/config/solder.php \
  /etc/templates/solder.php.tmpl

for DIR in github-api-cache logs meta resources
do
  if [ ! -d /storage/${DIR} ]
  then
    mkdir -p \
      /storage/${DIR}
  fi

  rm -rf \
    /srv/www/app/storage/${DIR}

  ln -sf \
    /storage/${DIR} \
    /srv/www/app/storage/${DIR}
done

if [ ! -d /storage/resources/default ]
then
  cp -rf \
    /srv/www/public/resources/* \
    /storage/resources/
fi

rm -rf \
  /srv/www/public/resources

ln -sf \
  /storage/resources \
  /srv/www/public/resources

chown -R caddy:caddy \
  /srv/www \
  /storage

pushd /srv/www > /dev/null
  /usr/bin/gosu \
    caddy \
    /usr/bin/php \
    artisan \
    clear-compiled -n -q

  /usr/bin/gosu \
    caddy \
    /usr/bin/php \
    artisan \
    optimize -n -q

  /usr/bin/gosu \
    caddy \
    /usr/bin/php \
    artisan \
    migrate:install -n -q

  /usr/bin/gosu \
    caddy \
    /usr/bin/php \
    artisan \
    migrate -n -q --force --seed
popd > /dev/null
